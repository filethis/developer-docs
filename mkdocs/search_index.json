{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome!\n\n\nThese pages will walk you through embedding the FileThis web components into your website. With very little coding on your part, you can present your users with a UI that provides a simple workflow for collecting documents from their online accounts, and then delivering them to your service on your users' behalf. \n\n\nWe've divided this guide into a number steps. You can work your way through each step by clicking on the items in the table of contents to the left, or by just clicking the \"Next\" button when you come to the end of each section.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "These pages will walk you through embedding the FileThis web components into your website. With very little coding on your part, you can present your users with a UI that provides a simple workflow for collecting documents from their online accounts, and then delivering them to your service on your users' behalf.   We've divided this guide into a number steps. You can work your way through each step by clicking on the items in the table of contents to the left, or by just clicking the \"Next\" button when you come to the end of each section.", 
            "title": "Welcome!"
        }, 
        {
            "location": "/front-end/ft-development-tool/", 
            "text": "Overview\n\n\n\n\nThe \nFileThisConnect Front End Development Tool\n is a single-page application that embeds an instance of the FileThisConnect web component element. It's a fixture that wraps a UI around the component, letting you configure, control, and play with the instance. All you need to make it work are your FileThis partner account API key and API secret strings. If you do not have a FileThis partner account yet, please contact \n.\n\n\nIn this section, you'll get familiar with how the available variants of the web component appear and behave, and how they guide users through complete document fetching workflows, without yet looking \"under the hood\" to see how the web component is wired up.\n\n\nLoading the App\n\n\nStart by loading the demo app into your browser from \nhere\n.\n\n\nNote that the values you enter into most of the fields in this app will be stored in the browser's local storage for your convenience. When you visit the page again, or refresh it, the fields will retain the values you entered previously. Fields which contain secrets are not stored with encryption. If you're not comfortable with leaving them there between sessions, you can click the \"Clear\" button in the \"Secrets\" item in the fixture panel when you're done working:\n\n\n\n\nFixture Configuration\n\n\n\n\nIf the \nFixture\n side-panel on the left of the window is hidden, click the right-pointing arrow button at the upper left of the window to show it.\n\n\nCopy and paste both your API key and API secret strings into the labeled fields.\n\n\nVerify that they are valid by clicking the \"Test\" button to the right of the fields.\n\n\nCreate a FileThis user account for testing by clicking the \"New\" button to the right of the account ID field.\n\n\nObserve that an account ID number appears in the field.\n\n\nTest the validity of the account ID by clicking the \"Test\" button to the right of the field. You can do this at any point in the future as a sanity check.\n\n\nCreate a user access token for the account by clicking the \"New\" button to the right of the \"Token\" field.\n\n\nObserve that a token string appears in the field.\n\n\nTest the validity of the token by clicking the \"Test\" button to the right of the field. This is useful for testing whether your token has expired, or not before using it for additional testing.\n\n\nObserve that there are three \"variants\" of the FileThisConnect web component available under the popup menu in the middle of the header bar of the main panel: \nft-connect-wizard\n, \nft-connect-tabbed\n, and \nft-connect-expand-out\n. The last one lets the user see a number of panels on the screen at the same time, expanding out to the right side of the web component element for each panel. The second one makes better use of screen real estate, placing each panel into a tab bar. The first one embodies a complete, self-contained user workflow and is recommended as a starting point. Make sure that the \nft-connect-wizard\n is selected before proceeding.\n\n\n\n\nThe Next Step\n\n\nHaving set up the fixture in the front end development tool, you're ready explore the behavior of a live instance of an embedded FileThis web component in the next section.", 
            "title": "The Development Tool"
        }, 
        {
            "location": "/front-end/ft-development-tool/#overview", 
            "text": "The  FileThisConnect Front End Development Tool  is a single-page application that embeds an instance of the FileThisConnect web component element. It's a fixture that wraps a UI around the component, letting you configure, control, and play with the instance. All you need to make it work are your FileThis partner account API key and API secret strings. If you do not have a FileThis partner account yet, please contact  .  In this section, you'll get familiar with how the available variants of the web component appear and behave, and how they guide users through complete document fetching workflows, without yet looking \"under the hood\" to see how the web component is wired up.", 
            "title": "Overview"
        }, 
        {
            "location": "/front-end/ft-development-tool/#loading-the-app", 
            "text": "Start by loading the demo app into your browser from  here .  Note that the values you enter into most of the fields in this app will be stored in the browser's local storage for your convenience. When you visit the page again, or refresh it, the fields will retain the values you entered previously. Fields which contain secrets are not stored with encryption. If you're not comfortable with leaving them there between sessions, you can click the \"Clear\" button in the \"Secrets\" item in the fixture panel when you're done working:", 
            "title": "Loading the App"
        }, 
        {
            "location": "/front-end/ft-development-tool/#fixture-configuration", 
            "text": "If the  Fixture  side-panel on the left of the window is hidden, click the right-pointing arrow button at the upper left of the window to show it.  Copy and paste both your API key and API secret strings into the labeled fields.  Verify that they are valid by clicking the \"Test\" button to the right of the fields.  Create a FileThis user account for testing by clicking the \"New\" button to the right of the account ID field.  Observe that an account ID number appears in the field.  Test the validity of the account ID by clicking the \"Test\" button to the right of the field. You can do this at any point in the future as a sanity check.  Create a user access token for the account by clicking the \"New\" button to the right of the \"Token\" field.  Observe that a token string appears in the field.  Test the validity of the token by clicking the \"Test\" button to the right of the field. This is useful for testing whether your token has expired, or not before using it for additional testing.  Observe that there are three \"variants\" of the FileThisConnect web component available under the popup menu in the middle of the header bar of the main panel:  ft-connect-wizard ,  ft-connect-tabbed , and  ft-connect-expand-out . The last one lets the user see a number of panels on the screen at the same time, expanding out to the right side of the web component element for each panel. The second one makes better use of screen real estate, placing each panel into a tab bar. The first one embodies a complete, self-contained user workflow and is recommended as a starting point. Make sure that the  ft-connect-wizard  is selected before proceeding.", 
            "title": "Fixture Configuration"
        }, 
        {
            "location": "/front-end/ft-development-tool/#the-next-step", 
            "text": "Having set up the fixture in the front end development tool, you're ready explore the behavior of a live instance of an embedded FileThis web component in the next section.", 
            "title": "The Next Step"
        }, 
        {
            "location": "/front-end/ft-rendered-component/", 
            "text": "Overview\n\n\nHaving created a FileThis user account and user access token, you can now inject these into the instance of the FileThisConnect web component that is embedded in the development tool's main panel. To turn it on, click the \"power\" button at the top right of the window. You should see the component render, showing a list of company logos for websites from which we can fetch documents. The component is now \"alive\" and communicating with the FileThis production server.\n\n\nIf an error occurs during the use of the web component instance, an error dialog will be displayed by the demo app, and the component will be turned off, as indicated by the power button at the top right. The expiration of the user access token is one such error case. When you embed the component into your product's website, you will likely wire up your own handler for error events to deal with things in your own way.\n\n\nDepending on which variant of the web component you selected, you will see one or more of the \"panel\" sub-components at different points in the user workflows. We describe each of these, next.\n\n\nThe Sites Panel\n\n\n\n\nThe first step in any FileThis user workflow is to allow the user to find and select a company website from which they can fetch their documents. The FileThisConnect web component variants all begin by presenting the user with a list of all companies to which we can connect. We have a sub-component named \nft-source-panel\n which provides this functionality.\n\n\nThe web component instance in your development tool app begins by displaying a list of companies in the ft-source-panel. Note that users can narrow down which companies are displayed by selecting a filter preset from a popup menu, and/or by entering a search string which matches company names. When the user recognizes a company to which they want to connect, they click its logo. When they do so, the component poses a modal dialog that prompts them to enter their username and password for the site's account:\n\n\n\n\nWhen the user commits the dialog, the component tells the FileThis server to create the connection and kick off the document-fetching operation.\n\n\nYou're welcome to test fetching documents from any website for which you have valid credentials, but for the sake of convenience you might begin by connecting to our test website. Depending on the fake password string you enter when you connect to the test site, you can explore a variety of different user workflows in a deterministic manner. You can find the test site in the company list by typing \"test\" into the search field. For example, you can choose a \"happy path\" that always returns a list of fake billing statements, never interrupting the workflow with a challenge question. The credentials that specify this workflow are:\n\n\nUsername: user\nPassword: bills\n\n\n\n\nOr, you can cause the site to challenge you with any of several kinds of questions. \nThis page\n documents the variety of use cases that the test site can simulate.\n\n\nThe Connections Panel\n\n\n\n\nHaving created a connection, either to our test site, or a real-world company site, you will see a representation of the connection appear in a list in the next panel \u2014an instance of our \nft-connection-panel\n subcomponent.\n\n\nAs soon as a connection is created, our server kicks off the first fetching job to retrieve documents from the site. The fetching process takes about as long to complete as it would take a speedy user to log in directly to the company site in their web browser, navigate to the download page, click the appropriate button to start the download, wait for available documents in a certain date range to finish downloading, and then log out. Because this process isn't instantaneous, the web component provides feedback to users to give them a sense of progress and to show them that they're being saved from having to do some rather tedious manual work.\n\n\nNote that an indeterminate progress indicator spins within the connection item that you created, indicating that work is being done. As soon as each document is downloaded by our service, you will see a thumbnail of the document's first page appear in the web component. After the last document appears, the progress indicator in the connection item stops spinning, and it returns to a resting state, showing the date of the last successful fetch operation.\n\n\nIt's not uncommon for websites to pose challenge questions after users log in successfully with their username and password. These can be questions like \"What is your mother's maiden name?\", or multiple-choice questions, or a prompt for a PIN code. When our fetching service encounters such a question on a website, it must be conveyed to the user on your website by some means, so that it can be answered by them. The answer they provide must then be sent back to our fetching service so that the operation can resume. The FileThisConnect web component handles this back-and-forth for you, dynamically rendering a modal dialog on your website to pose the question to the user, collecting their answer, and returning it to our service. For example:\n\n\n\n\nOur test site provides a convenient and deterministic way to test a variety of workflows that include challenge questions of different types. Again, \nthis document\n tells you which fake password string to use to determine the workflow to simulate.\n\n\nIf you're curious about the data schema used internally by FileThis to represent challenge questions their and answers, take a look at \nthis application\n. The left-side column shows the JSON data that represents the question. The center column is a live instance of our \nft-user-interaction-form\n sub-component which dynamically renders the question data as a modal dialog. The right-side column displays the JSON data that represents the answer that the user enters into the dialog.\n\n\nThe Documents Panel\n\n\n\n\nWe mentioned above that as documents start to be fetched from a company website for the connections created by a user, we display thumbnails of their first page in our web component. This uses an instance of our \nft-document-panel\n sub-component.\n\n\nThe Next Step\n\n\nIn the next section you'll look behind the live web component to see the code that is used to embed it into an HTML page.", 
            "title": "A Live Component"
        }, 
        {
            "location": "/front-end/ft-rendered-component/#overview", 
            "text": "Having created a FileThis user account and user access token, you can now inject these into the instance of the FileThisConnect web component that is embedded in the development tool's main panel. To turn it on, click the \"power\" button at the top right of the window. You should see the component render, showing a list of company logos for websites from which we can fetch documents. The component is now \"alive\" and communicating with the FileThis production server.  If an error occurs during the use of the web component instance, an error dialog will be displayed by the demo app, and the component will be turned off, as indicated by the power button at the top right. The expiration of the user access token is one such error case. When you embed the component into your product's website, you will likely wire up your own handler for error events to deal with things in your own way.  Depending on which variant of the web component you selected, you will see one or more of the \"panel\" sub-components at different points in the user workflows. We describe each of these, next.", 
            "title": "Overview"
        }, 
        {
            "location": "/front-end/ft-rendered-component/#the-sites-panel", 
            "text": "The first step in any FileThis user workflow is to allow the user to find and select a company website from which they can fetch their documents. The FileThisConnect web component variants all begin by presenting the user with a list of all companies to which we can connect. We have a sub-component named  ft-source-panel  which provides this functionality.  The web component instance in your development tool app begins by displaying a list of companies in the ft-source-panel. Note that users can narrow down which companies are displayed by selecting a filter preset from a popup menu, and/or by entering a search string which matches company names. When the user recognizes a company to which they want to connect, they click its logo. When they do so, the component poses a modal dialog that prompts them to enter their username and password for the site's account:   When the user commits the dialog, the component tells the FileThis server to create the connection and kick off the document-fetching operation.  You're welcome to test fetching documents from any website for which you have valid credentials, but for the sake of convenience you might begin by connecting to our test website. Depending on the fake password string you enter when you connect to the test site, you can explore a variety of different user workflows in a deterministic manner. You can find the test site in the company list by typing \"test\" into the search field. For example, you can choose a \"happy path\" that always returns a list of fake billing statements, never interrupting the workflow with a challenge question. The credentials that specify this workflow are:  Username: user\nPassword: bills  Or, you can cause the site to challenge you with any of several kinds of questions.  This page  documents the variety of use cases that the test site can simulate.", 
            "title": "The Sites Panel"
        }, 
        {
            "location": "/front-end/ft-rendered-component/#the-connections-panel", 
            "text": "Having created a connection, either to our test site, or a real-world company site, you will see a representation of the connection appear in a list in the next panel \u2014an instance of our  ft-connection-panel  subcomponent.  As soon as a connection is created, our server kicks off the first fetching job to retrieve documents from the site. The fetching process takes about as long to complete as it would take a speedy user to log in directly to the company site in their web browser, navigate to the download page, click the appropriate button to start the download, wait for available documents in a certain date range to finish downloading, and then log out. Because this process isn't instantaneous, the web component provides feedback to users to give them a sense of progress and to show them that they're being saved from having to do some rather tedious manual work.  Note that an indeterminate progress indicator spins within the connection item that you created, indicating that work is being done. As soon as each document is downloaded by our service, you will see a thumbnail of the document's first page appear in the web component. After the last document appears, the progress indicator in the connection item stops spinning, and it returns to a resting state, showing the date of the last successful fetch operation.  It's not uncommon for websites to pose challenge questions after users log in successfully with their username and password. These can be questions like \"What is your mother's maiden name?\", or multiple-choice questions, or a prompt for a PIN code. When our fetching service encounters such a question on a website, it must be conveyed to the user on your website by some means, so that it can be answered by them. The answer they provide must then be sent back to our fetching service so that the operation can resume. The FileThisConnect web component handles this back-and-forth for you, dynamically rendering a modal dialog on your website to pose the question to the user, collecting their answer, and returning it to our service. For example:   Our test site provides a convenient and deterministic way to test a variety of workflows that include challenge questions of different types. Again,  this document  tells you which fake password string to use to determine the workflow to simulate.  If you're curious about the data schema used internally by FileThis to represent challenge questions their and answers, take a look at  this application . The left-side column shows the JSON data that represents the question. The center column is a live instance of our  ft-user-interaction-form  sub-component which dynamically renders the question data as a modal dialog. The right-side column displays the JSON data that represents the answer that the user enters into the dialog.", 
            "title": "The Connections Panel"
        }, 
        {
            "location": "/front-end/ft-rendered-component/#the-documents-panel", 
            "text": "We mentioned above that as documents start to be fetched from a company website for the connections created by a user, we display thumbnails of their first page in our web component. This uses an instance of our  ft-document-panel  sub-component.", 
            "title": "The Documents Panel"
        }, 
        {
            "location": "/front-end/ft-rendered-component/#the-next-step", 
            "text": "In the next section you'll look behind the live web component to see the code that is used to embed it into an HTML page.", 
            "title": "The Next Step"
        }, 
        {
            "location": "/front-end/ft-code-generation/", 
            "text": "Overview\n\n\nIn this section you'll take a look at the code generated by the FileThis development tool for your chosen web component variant and its configuration. This code can be used to easily bring an embedded instance of the component to life in your website.\n\n\nViewing the code\n\n\nIn the \nInstance\n panel of the development tool, click the \"Code\" button:\n\n\n\n\nand observe that the main panel switches to show two subpanels with fragments of HTML code:\n\n\n\n\nThe first subpanel contains code that loads the Web Components \"polyfill\". This is JavaScript code that intelligently patches the user's runtime environment to add any functionality needed by the component that is not yet native in the version of the user's browser. The standard place to put code like this is into the \nhead\n element of your main index.html page so that it loads early and is available when it's needed.\n\n\nThe second subpanel contains the code that loads the FileThis component code and embeds it onto your chosen page. The first fragment in this subpanel is special kind of link element called an \"HTML Import\". This will load the referenced code and any HTML import links it contains, recursively, making sure that the same code is not loaded more than once (doing \"deduplication\"). You will put this link at the top of the page where you want to embed the component.\n\n\nThe second fragment in the second subpanel is the actual component element itself. You will put this at the appropriate spot in the content of your page.\n\n\nDeployment Type\n\n\nIn the \nInstance\n panel of the development tool, observe that there is a popup menu named \"Deployment\" that lets you choose between \"Drop-in\" and \"Production\":\n\n\n\n\nIf you toggle this choice, you'll see that the URL's change in the links in the code subpanels below.\n\n\nThe \"Drop-in\" option makes it very easy to test the FileThis web component because you don't need to provision your site to include the libraries that the component depends upon to run (including the code for the component's own implementation). Note that the URL's for this option are all external and are served from a CDN. Of course, you would not want to use this deployment option in your production system for several reasons. For one, you will want to run all client code through your build pipeline to vulcanize, minify, etc.\n\n\nThe \"Production\" option is what you'll want to use once you're done testing and prototyping. Note that the URL's in the production links refer to a \"bower_components\" directory that is relative to the page. You'll learn more in the next section about how to populate this directory.\n\n\nConfiguration\n\n\nNotice that, by default, the code fragment for instantiating the FileThis component has \"handlebar\" substitution parameters for two attributes:\n\n\n\n\nTo complete your integration with FileThis, you will need inject these values into your HTML by some means. Your back-end code will obtain the values them by making requests to our API. You don't need to deal with this just yet, but if you'd like to get an idea of what's required, you can click on the \"Code\" buttons in the \"Fixture\" panel of the development tool:\n\n\n\n\nThat will pose a modal dialog that lets you generate code for the server-side language and support library of your choice.\n\n\nIn the meantime, though, we will \ncheat\n and simply substitute the values that you already obtained in the development tool fixture. Do do this, click to select the checkbox at the bottom of the second code subpanel. Observe that the handlebar substitution parameters are replaced by your fixture's user account id and user access token. You'll copy this code in the next section to embed the component.\n\n\nThe Next Steps\n\n\nNow that you've been able to play with a live instance of a FileThis web component, and you have the code that's used to instantiate it, you're ready to try embedding your component code into an actual website.\n\n\nIf you're ambitious, and if it's easy, you might just try dropping the generated code above into your existing website on a dev server. It will render and function just as it should, talking to our production server. Of course it's not real, in the sense that you've cheated by using hard-coded access parameters (and the token will expire, furthermore), and you haven't done your back-end integration yet to do things like receive fetched documents, but it might be exciting to see things run on your site.\n\n\nIn the next section, you'll embed the component into a minimal website that is served from your development box.", 
            "title": "Generated Code"
        }, 
        {
            "location": "/front-end/ft-code-generation/#overview", 
            "text": "In this section you'll take a look at the code generated by the FileThis development tool for your chosen web component variant and its configuration. This code can be used to easily bring an embedded instance of the component to life in your website.", 
            "title": "Overview"
        }, 
        {
            "location": "/front-end/ft-code-generation/#viewing-the-code", 
            "text": "In the  Instance  panel of the development tool, click the \"Code\" button:   and observe that the main panel switches to show two subpanels with fragments of HTML code:   The first subpanel contains code that loads the Web Components \"polyfill\". This is JavaScript code that intelligently patches the user's runtime environment to add any functionality needed by the component that is not yet native in the version of the user's browser. The standard place to put code like this is into the  head  element of your main index.html page so that it loads early and is available when it's needed.  The second subpanel contains the code that loads the FileThis component code and embeds it onto your chosen page. The first fragment in this subpanel is special kind of link element called an \"HTML Import\". This will load the referenced code and any HTML import links it contains, recursively, making sure that the same code is not loaded more than once (doing \"deduplication\"). You will put this link at the top of the page where you want to embed the component.  The second fragment in the second subpanel is the actual component element itself. You will put this at the appropriate spot in the content of your page.", 
            "title": "Viewing the code"
        }, 
        {
            "location": "/front-end/ft-code-generation/#deployment-type", 
            "text": "In the  Instance  panel of the development tool, observe that there is a popup menu named \"Deployment\" that lets you choose between \"Drop-in\" and \"Production\":   If you toggle this choice, you'll see that the URL's change in the links in the code subpanels below.  The \"Drop-in\" option makes it very easy to test the FileThis web component because you don't need to provision your site to include the libraries that the component depends upon to run (including the code for the component's own implementation). Note that the URL's for this option are all external and are served from a CDN. Of course, you would not want to use this deployment option in your production system for several reasons. For one, you will want to run all client code through your build pipeline to vulcanize, minify, etc.  The \"Production\" option is what you'll want to use once you're done testing and prototyping. Note that the URL's in the production links refer to a \"bower_components\" directory that is relative to the page. You'll learn more in the next section about how to populate this directory.", 
            "title": "Deployment Type"
        }, 
        {
            "location": "/front-end/ft-code-generation/#configuration", 
            "text": "Notice that, by default, the code fragment for instantiating the FileThis component has \"handlebar\" substitution parameters for two attributes:   To complete your integration with FileThis, you will need inject these values into your HTML by some means. Your back-end code will obtain the values them by making requests to our API. You don't need to deal with this just yet, but if you'd like to get an idea of what's required, you can click on the \"Code\" buttons in the \"Fixture\" panel of the development tool:   That will pose a modal dialog that lets you generate code for the server-side language and support library of your choice.  In the meantime, though, we will  cheat  and simply substitute the values that you already obtained in the development tool fixture. Do do this, click to select the checkbox at the bottom of the second code subpanel. Observe that the handlebar substitution parameters are replaced by your fixture's user account id and user access token. You'll copy this code in the next section to embed the component.", 
            "title": "Configuration"
        }, 
        {
            "location": "/front-end/ft-code-generation/#the-next-steps", 
            "text": "Now that you've been able to play with a live instance of a FileThis web component, and you have the code that's used to instantiate it, you're ready to try embedding your component code into an actual website.  If you're ambitious, and if it's easy, you might just try dropping the generated code above into your existing website on a dev server. It will render and function just as it should, talking to our production server. Of course it's not real, in the sense that you've cheated by using hard-coded access parameters (and the token will expire, furthermore), and you haven't done your back-end integration yet to do things like receive fetched documents, but it might be exciting to see things run on your site.  In the next section, you'll embed the component into a minimal website that is served from your development box.", 
            "title": "The Next Steps"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/", 
            "text": "Overview\n\n\nThe \nFileThisConnect Minimal Site\n is a simple website that embeds an instance of the FileThisConnect web component element. Unlike the FileThis development tool that you used in the previous section, this website will be served from your own development machine, not from \nfilethis.com\n. Because you'll have the site's source files, you'll be able to see just how simple the embedding is. Also, when you've finished, you'll have installed a number of development tools that you'll need in the final section. \n\n\nTrue to its name, this website is \"minimal\" in that there is no support in it for creating a FileThis user account or user access token, as there was in the FileThisConnect development tool's fixture UI. You'll simply paste the code generated by the development tool into the site's main HTML file.\n\n\nAll of the FileThis web components, sub-components, demo and sample applications are available as open source in public GitHub repositories. The code for this website, named \nft-connect-minimal-site\n, lives \nhere\n. The instructions below will ask you to download a copy of it to your machine.\n\n\nDevelopment Environment Setup\n\n\nThere are a number of tools you'll need to install to support bootstrapping the \nft-connect-minimal-site\n project and running it on your dev machine.\n\n\nThe following instructions assume you have a Unix-like shell environment, but should work without too much trouble on a Windows box, as well. Feedback about how to improve the instructions for the Windows platform is welcome.\n\n\nInstall the Node Package Manager\n\n\nThe \nNode Package Manager\n (NPM) makes it easy to download and install Javascript tools and libraries from the command line. We need it for just one reason: to install a tool called \nBower\n, which is yet another package manager.\n\n\nThe easiest way to install the \nnpm\n command line tool is to install the whole NodeJS package. You can get the installer from \nhere\n.\n\n\nOnce it's installed, verify that the \nnpm\n command is available in your terminal by running:\n\n\nnpm --version\n\n\n\nand observing that you are given a version number.\n\n\nInstall Git\n\n\nBower uses \nGit\n to store the code and version tags associated with the packages that it manages. The \ngit\n command line tool must be installed on your machine in order for it to work.\n\n\nThere are many ways to install Git on each platform. Follow \nthis guide\n to decide the best way for you. \n\n\nWhen you're done, verify that the \ngit\n command is available in your terminal by running:\n\n\ngit --version\n\n\n\nInstall Bower\n\n\nNext, we use NPM to install \nBower\n. Run this command:\n\n\nnpm install -g bower\n\n\n\nYou should see some verbose progress information fly by as other packages that Bower depends on are installed, ending with some indication of success.\n\n\nVerify that you have the \nbower\n command available in your terminal by running:\n\n\nbower --version\n\n\n\nChoose a webserver\n\n\nIn order to run the \nft-connect-minimal-site\n app, you'll need to serve its project files so that your browser can render them. If you already have a favorite local webserver of some kind, you can skip this step. If you don't, here are some options:\n\n\nBrowserSync\n\n\nBrowserSync\n is a personal favorite at FileThis and is highly recommended. Among several nifty features is one that automatically reloads the page when any served file changes \u2014Make a change in your editor, save it, see the page rerender with the change.\n\n\nInstall with:\n\n\nnpm install -g browser-sync\n\n\n\nand run with:\n\n\nbrowser-sync start --config \"bs-config.js\" --server --port 3505\n\n\n\nNote that if you want to the use the configuration options in the \nbs-config.js\n file, you will need to run this from inside your \nft-connect-minimal-site\n project directory. If you don't use this file, you'll need to either define your own, or add configuration options to the command line.\n\n\nYou can take advantage of BrowserSync's automatic loading feature even if you choose to use your own webserver, or one of the options listed below by using its \"proxy\" feature.\n\n\nbrowser-sync start --proxy localhost:8888 --config \"bs-config.js\" --server --port 3505\n\n\n\nwhere \"localhost:8888\" is the URL of your webserver\n\n\nPython 2.7+\n\n\nAssuming you already have Python 2.7 installed, run with:\n\n\npython -m SimpleHTTPServer 3505\n\n\n\nPython 3.x\n\n\nAssuming you already have Python 3 installed, run with:\n\n\npython -m http.server 3505\n\n\n\nRuby 1.9.2+\n\n\nAssuming you already have Ruby installed, run with:\n\n\nruby -run -ehttpd . -p3505\n\n\n\nNodeJS static-server\n\n\nInstall with:\n\n\nnpm -g install static-server\n\n\n\nand run with:\n\n\nstatic-server --port 3505\n\n\n\nPHP 5.4+\n\n\nAssuming you already have PHP installed, run with:\n\n\nphp -S 127.0.0.1:3505\n\n\n\nProject setup\n\n\nNow you're ready to download the \nft-connect-minimal-site\n code to your development machine and install the libraries that the code depends on.\n\n\nGet the project source code\n\n\nFind a place for the project code to live on your filesystem and clone the remote repository using:\n\n\ngit clone git@github.com:filethis/ft-connect-minimal-site.git\n\n\n\nThen move into the created project directory:\n\n\ncd ft-connect-minimal-site\n\n\n\nInstall the project's library dependencies\n\n\nNow we can use Bower to download and install all the other web component elements that the app uses, as well as the small runtime support library.\n\n\nIf you're curious, take a look at the list of dependencies in the \nbower.json\n file in the project directory. The \nbower\n command will read each of these in turn and pull down not only these dependencies, but any dependencies of the listed packages, recursively.\n\n\nWhile still inside your \nft-connect-minimal-site\n directory, install the dependencies by running:\n\n\nbower install\n\n\n\nYou will see a lot of progress information go by. It should complete without error or interruption.\n\n\nWhen done, take a look in your project directory and observe that it contains a new directory called \nbower_components\n. This new directory contains all the libraries that the project depends on.\n\n\nDrop in the component\n\n\nAs mentioned above, this project does not provide any runtime support for either creating a FileThis user account, or for obtaining a user access token. You will need to paste literal values for both of these into the source code before running it.\n\n\nGet an account ID and user access token\n\n\nOpen the \nFileThisConnect Development Tool\n application now and copy a valid FileThis account id and a user access token from it. You may want to create a fresh token so that it does not expire anytime soon.\n\n\nConfigure the account ID and user access token\n\n\nIn an editor, open the \n./src/ft-connect-minimal-site.html\n file in your project directory. Locate the \nuser-account-id\n attribute of the element and paste the account id string into its value. Locate the \ntoken\n attribute and paste the token string into its value. Save your changes.\n\n\nAbout CORS\n\n\nIt may already have occurred to you to there is a potential problem here: Browsers prevent access to data from more than one domain in order to prevent cross-site script exploits. Our component is about to be loaded from your local file system (domain \nlocalhost\n), and it intends to make \nXMLHttpRequest\n (\"AJAX\") calls to the FileThis service, (domain \nfilethis.com\n). Unless we do something special, your browser will happily load the component, and then simply refuse to make the HTTP requests to FileThis.\n\n\nFortunately, browser manufacturers have provided a way to make specific exceptions to the cross-domain restriction in a safe manner. They call this Cross-Origin Resource Sharing, or CORS, for short. In brief, it works like this:\n\n\n\n\nWhen the browser is asked to send an HTTP request to an origin other than the one from which the site was originally loaded, it first builds a \"preflight\" request that has the same URL and some of the same headers as the actual request.\n\n\nThe browser sends its preflight request to the server using the \nOPTIONS\n HTTP verb.\n\n\nUpon receiving this \nOPTIONS\n request, the server reads the domain name and port from the request's \nORIGIN\n header (\nhttp://localhost:3505\n, in our case) and looks this up in an internal whitelist table of some kind. If it finds a match, it responds with success to the \nOPTIONS\n request, returning a 200 result code. If it does not find a match, it returns with a non-200 response. We mention in passing that there are other request and response headers which further refine what the requestor is asking to do and, in turn, what server will allow.\n\n\nWhen it receives a 200 response to its \nOPTIONS\n preflight request, the browser then sends the original request, and things proceed normally.\n\n\n\n\nTo make things easier, the FileThis server has been preconfigured to include a CORS whitelist entry for any \nhttp\n or \nhttps\n URL that uses the \nlocalhost\n domain (on any port) so that developers can run our demo and sample applications out of the box.\n\n\nYou may be wondering how things are handled once you move your code from your development box (\nlocalhost\n) to your testing, staging, and production systems. The FileThisConnect component that you embed into your website will be served, along with all your other files, from your own domains. The FileThis server will need to have a CORS whitelist entry for your address \u2014something like \nhttps://acme.com\n and \nhttps://staging.acme.com\n. We are working on an enhanced version of our partner console that will allow you to edit your own whitelist. Until then, please send us a list of your addresses and we will update your whitelist for you.\n\n\nThe Next Step\n\n\nNow that you've brought up the minimal app on your development box, and have installed a number of development tools there, you're ready to move on to embedding the component into your website and starting to work on your back-end integration with FileThis. Please contact us on our Slack channel for further guidance.", 
            "title": "Embedding into a Minimal Site"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#overview", 
            "text": "The  FileThisConnect Minimal Site  is a simple website that embeds an instance of the FileThisConnect web component element. Unlike the FileThis development tool that you used in the previous section, this website will be served from your own development machine, not from  filethis.com . Because you'll have the site's source files, you'll be able to see just how simple the embedding is. Also, when you've finished, you'll have installed a number of development tools that you'll need in the final section.   True to its name, this website is \"minimal\" in that there is no support in it for creating a FileThis user account or user access token, as there was in the FileThisConnect development tool's fixture UI. You'll simply paste the code generated by the development tool into the site's main HTML file.  All of the FileThis web components, sub-components, demo and sample applications are available as open source in public GitHub repositories. The code for this website, named  ft-connect-minimal-site , lives  here . The instructions below will ask you to download a copy of it to your machine.", 
            "title": "Overview"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#development-environment-setup", 
            "text": "There are a number of tools you'll need to install to support bootstrapping the  ft-connect-minimal-site  project and running it on your dev machine.  The following instructions assume you have a Unix-like shell environment, but should work without too much trouble on a Windows box, as well. Feedback about how to improve the instructions for the Windows platform is welcome.", 
            "title": "Development Environment Setup"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#install-the-node-package-manager", 
            "text": "The  Node Package Manager  (NPM) makes it easy to download and install Javascript tools and libraries from the command line. We need it for just one reason: to install a tool called  Bower , which is yet another package manager.  The easiest way to install the  npm  command line tool is to install the whole NodeJS package. You can get the installer from  here .  Once it's installed, verify that the  npm  command is available in your terminal by running:  npm --version  and observing that you are given a version number.", 
            "title": "Install the Node Package Manager"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#install-git", 
            "text": "Bower uses  Git  to store the code and version tags associated with the packages that it manages. The  git  command line tool must be installed on your machine in order for it to work.  There are many ways to install Git on each platform. Follow  this guide  to decide the best way for you.   When you're done, verify that the  git  command is available in your terminal by running:  git --version", 
            "title": "Install Git"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#install-bower", 
            "text": "Next, we use NPM to install  Bower . Run this command:  npm install -g bower  You should see some verbose progress information fly by as other packages that Bower depends on are installed, ending with some indication of success.  Verify that you have the  bower  command available in your terminal by running:  bower --version", 
            "title": "Install Bower"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#choose-a-webserver", 
            "text": "In order to run the  ft-connect-minimal-site  app, you'll need to serve its project files so that your browser can render them. If you already have a favorite local webserver of some kind, you can skip this step. If you don't, here are some options:", 
            "title": "Choose a webserver"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#browsersync", 
            "text": "BrowserSync  is a personal favorite at FileThis and is highly recommended. Among several nifty features is one that automatically reloads the page when any served file changes \u2014Make a change in your editor, save it, see the page rerender with the change.  Install with:  npm install -g browser-sync  and run with:  browser-sync start --config \"bs-config.js\" --server --port 3505  Note that if you want to the use the configuration options in the  bs-config.js  file, you will need to run this from inside your  ft-connect-minimal-site  project directory. If you don't use this file, you'll need to either define your own, or add configuration options to the command line.  You can take advantage of BrowserSync's automatic loading feature even if you choose to use your own webserver, or one of the options listed below by using its \"proxy\" feature.  browser-sync start --proxy localhost:8888 --config \"bs-config.js\" --server --port 3505  where \"localhost:8888\" is the URL of your webserver", 
            "title": "BrowserSync"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#python-27", 
            "text": "Assuming you already have Python 2.7 installed, run with:  python -m SimpleHTTPServer 3505", 
            "title": "Python 2.7+"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#python-3x", 
            "text": "Assuming you already have Python 3 installed, run with:  python -m http.server 3505", 
            "title": "Python 3.x"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#ruby-192", 
            "text": "Assuming you already have Ruby installed, run with:  ruby -run -ehttpd . -p3505", 
            "title": "Ruby 1.9.2+"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#nodejs-static-server", 
            "text": "Install with:  npm -g install static-server  and run with:  static-server --port 3505", 
            "title": "NodeJS static-server"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#php-54", 
            "text": "Assuming you already have PHP installed, run with:  php -S 127.0.0.1:3505", 
            "title": "PHP 5.4+"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#project-setup", 
            "text": "Now you're ready to download the  ft-connect-minimal-site  code to your development machine and install the libraries that the code depends on.", 
            "title": "Project setup"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#get-the-project-source-code", 
            "text": "Find a place for the project code to live on your filesystem and clone the remote repository using:  git clone git@github.com:filethis/ft-connect-minimal-site.git  Then move into the created project directory:  cd ft-connect-minimal-site", 
            "title": "Get the project source code"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#install-the-projects-library-dependencies", 
            "text": "Now we can use Bower to download and install all the other web component elements that the app uses, as well as the small runtime support library.  If you're curious, take a look at the list of dependencies in the  bower.json  file in the project directory. The  bower  command will read each of these in turn and pull down not only these dependencies, but any dependencies of the listed packages, recursively.  While still inside your  ft-connect-minimal-site  directory, install the dependencies by running:  bower install  You will see a lot of progress information go by. It should complete without error or interruption.  When done, take a look in your project directory and observe that it contains a new directory called  bower_components . This new directory contains all the libraries that the project depends on.", 
            "title": "Install the project's library dependencies"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#drop-in-the-component", 
            "text": "As mentioned above, this project does not provide any runtime support for either creating a FileThis user account, or for obtaining a user access token. You will need to paste literal values for both of these into the source code before running it.", 
            "title": "Drop in the component"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#get-an-account-id-and-user-access-token", 
            "text": "Open the  FileThisConnect Development Tool  application now and copy a valid FileThis account id and a user access token from it. You may want to create a fresh token so that it does not expire anytime soon.", 
            "title": "Get an account ID and user access token"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#configure-the-account-id-and-user-access-token", 
            "text": "In an editor, open the  ./src/ft-connect-minimal-site.html  file in your project directory. Locate the  user-account-id  attribute of the element and paste the account id string into its value. Locate the  token  attribute and paste the token string into its value. Save your changes.", 
            "title": "Configure the account ID and user access token"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#about-cors", 
            "text": "It may already have occurred to you to there is a potential problem here: Browsers prevent access to data from more than one domain in order to prevent cross-site script exploits. Our component is about to be loaded from your local file system (domain  localhost ), and it intends to make  XMLHttpRequest  (\"AJAX\") calls to the FileThis service, (domain  filethis.com ). Unless we do something special, your browser will happily load the component, and then simply refuse to make the HTTP requests to FileThis.  Fortunately, browser manufacturers have provided a way to make specific exceptions to the cross-domain restriction in a safe manner. They call this Cross-Origin Resource Sharing, or CORS, for short. In brief, it works like this:   When the browser is asked to send an HTTP request to an origin other than the one from which the site was originally loaded, it first builds a \"preflight\" request that has the same URL and some of the same headers as the actual request.  The browser sends its preflight request to the server using the  OPTIONS  HTTP verb.  Upon receiving this  OPTIONS  request, the server reads the domain name and port from the request's  ORIGIN  header ( http://localhost:3505 , in our case) and looks this up in an internal whitelist table of some kind. If it finds a match, it responds with success to the  OPTIONS  request, returning a 200 result code. If it does not find a match, it returns with a non-200 response. We mention in passing that there are other request and response headers which further refine what the requestor is asking to do and, in turn, what server will allow.  When it receives a 200 response to its  OPTIONS  preflight request, the browser then sends the original request, and things proceed normally.   To make things easier, the FileThis server has been preconfigured to include a CORS whitelist entry for any  http  or  https  URL that uses the  localhost  domain (on any port) so that developers can run our demo and sample applications out of the box.  You may be wondering how things are handled once you move your code from your development box ( localhost ) to your testing, staging, and production systems. The FileThisConnect component that you embed into your website will be served, along with all your other files, from your own domains. The FileThis server will need to have a CORS whitelist entry for your address \u2014something like  https://acme.com  and  https://staging.acme.com . We are working on an enhanced version of our partner console that will allow you to edit your own whitelist. Until then, please send us a list of your addresses and we will update your whitelist for you.", 
            "title": "About CORS"
        }, 
        {
            "location": "/front-end/ft-connect-minimal-site/#the-next-step", 
            "text": "Now that you've brought up the minimal app on your development box, and have installed a number of development tools there, you're ready to move on to embedding the component into your website and starting to work on your back-end integration with FileThis. Please contact us on our Slack channel for further guidance.", 
            "title": "The Next Step"
        }
    ]
}